name: Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  NODE_VERSION: '22'
  RUST_VERSION: 'stable'

jobs:
  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Cache node modules
      uses: actions/cache@v3
      with:
        path: ~/.yarn/cache
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-

    - name: Install dependencies
      run: yarn install --frozen-lockfile

    - name: Type check
      run: yarn tsc --noEmit

    - name: Build frontend
      run: yarn build

    - name: Run tests
      run: yarn test --if-present

  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ env.RUST_VERSION }}

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Run tests
      run: |
        cd src-tauri
        cargo test --all-features

    - name: Check formatting
      run: |
        cd src-tauri
        cargo fmt -- --check

    - name: Run clippy
      run: |
        cd src-tauri
        cargo clippy -- -D warnings

  build:
    name: Build ${{ matrix.platform.name }}
    needs: [test-frontend, test-backend]
    strategy:
      fail-fast: false
      matrix:
        platform:
          - name: Linux
            os: ubuntu-latest
            rust_target: x86_64-unknown-linux-gnu
          - name: Windows
            os: windows-latest
            rust_target: x86_64-pc-windows-msvc
          - name: macOS (Intel)
            os: macos-latest
            rust_target: x86_64-apple-darwin
          - name: macOS (Apple Silicon)
            os: macos-latest
            rust_target: aarch64-apple-darwin

    runs-on: ${{ matrix.platform.os }}

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ env.RUST_VERSION }}
        targets: ${{ matrix.platform.rust_target }}

    - name: Install Linux dependencies
      if: matrix.platform.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libwebkit2gtk-4.1-dev \
          libappindicator3-dev \
          librsvg2-dev \
          patchelf \
          libssl-dev \
          libjavascriptcoregtk-4.1-dev \
          libsoup-3.0-dev \
          libgdk-pixbuf-2.0-dev \
          libpango1.0-dev \
          libatk1.0-dev \
          libcairo2-dev

    - name: Cache node modules
      uses: actions/cache@v3
      with:
        path: ~/.yarn/cache
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Install frontend dependencies
      run: yarn install --frozen-lockfile

    - name: Build Tauri app
      run: yarn tauri build --target ${{ matrix.platform.rust_target }}

    - name: Upload artifacts (Windows)
      if: matrix.platform.os == 'windows-latest'
      uses: actions/upload-artifact@v3
      with:
        name: postium-mail-${{ matrix.platform.name }}
        path: |
          src-tauri/target/${{ matrix.platform.rust_target }}/release/bundle/msi/*.msi
          src-tauri/target/${{ matrix.platform.rust_target }}/release/bundle/nsis/*.exe

    - name: Upload artifacts (macOS)
      if: startsWith(matrix.platform.os, 'macos')
      uses: actions/upload-artifact@v3
      with:
        name: postium-mail-${{ matrix.platform.name }}
        path: |
          src-tauri/target/${{ matrix.platform.rust_target }}/release/bundle/dmg/*.dmg
          src-tauri/target/${{ matrix.platform.rust_target }}/release/bundle/macos/*.app

    - name: Upload artifacts (Linux)
      if: matrix.platform.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v3
      with:
        name: postium-mail-${{ matrix.platform.name }}
        path: |
          src-tauri/target/${{ matrix.platform.rust_target }}/release/bundle/deb/*.deb
          src-tauri/target/${{ matrix.platform.rust_target }}/release/bundle/rpm/*.rpm
          src-tauri/target/${{ matrix.platform.rust_target }}/release/bundle/appimage/*.AppImage

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
    - uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          postium-mail-*/*
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
